// Full React Native Medicine Reminder App with Calendar View and History

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, FlatList, Alert, Platform, TouchableOpacity } from 'react-native';
import PushNotification from 'react-native-push-notification';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { Calendar } from 'react-native-calendars';

const Tab = createBottomTabNavigator();

const generateDateString = () => {
  const now = new Date();
  return now.toISOString().split('T')[0];
};

const HomeScreen = () => {
  const [medName, setMedName] = useState('');
  const [time, setTime] = useState('');
  const [reminders, setReminders] = useState([]);
  const [history, setHistory] = useState({});

  useEffect(() => {
    PushNotification.configure({
      onNotification: function (notification) {
        console.log('Notification:', notification);
      },
      requestPermissions: Platform.OS === 'ios',
    });
  }, []);

  const scheduleNotification = (med, when) => {
    PushNotification.localNotificationSchedule({
      message: `Time to take your medicine: ${med}`,
      date: new Date(Date.now() + parseInt(when) * 60000),
    });
  };

  const addReminder = () => {
    if (!medName || !time) {
      Alert.alert('Error', 'Please enter medicine name and time in minutes');
      return;
    }
    const newReminder = {
      id: Date.now().toString(),
      medName,
      time,
      date: generateDateString(),
    };
    setReminders([...reminders, newReminder]);
    scheduleNotification(medName, time);
    setMedName('');
    setTime('');
  };

  const markAsTaken = (item) => {
    const date = item.date;
    setHistory({
      ...history,
      [date]: [...(history[date] || []), item.medName],
    });
    Alert.alert('Marked', `${item.medName} marked as taken on ${date}`);
  };

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 20, marginBottom: 10 }}>Set Medicine Reminder</Text>
      <TextInput
        placeholder="Medicine Name"
        value={medName}
        onChangeText={setMedName}
        style={{ borderWidth: 1, padding: 10, marginBottom: 10 }}
      />
      <TextInput
        placeholder="Time (in minutes)"
        value={time}
        onChangeText={setTime}
        keyboardType="numeric"
        style={{ borderWidth: 1, padding: 10, marginBottom: 10 }}
      />
      <Button title="Add Reminder" onPress={addReminder} />
      <Text style={{ marginTop: 20, fontWeight: 'bold' }}>Upcoming Reminders:</Text>
      <FlatList
        data={reminders}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => markAsTaken(item)}>
            <Text style={{ marginTop: 10 }}>
              {item.medName} - in {item.time} min (Date: {item.date})
            </Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
};

const CalendarScreen = () => {
  const [selectedDate, setSelectedDate] = useState(generateDateString());

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 20, marginBottom: 10 }}>Calendar</Text>
      <Calendar
        onDayPress={(day) => setSelectedDate(day.dateString)}
        markedDates={{
          [selectedDate]: { selected: true, marked: true },
        }}
      />
      <Text style={{ marginTop: 20 }}>Selected Date: {selectedDate}</Text>
    </View>
  );
};

const HistoryScreen = ({ route }) => {
  const [historyData, setHistoryData] = useState({});

  useEffect(() => {
    // Placeholder: load from storage or state
    // Here we just simulate empty data
    setHistoryData({});
  }, []);

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 20, marginBottom: 10 }}>Medication History</Text>
      {Object.keys(historyData).length === 0 ? (
        <Text>No history found</Text>
      ) : (
        Object.entries(historyData).map(([date, meds]) => (
          <View key={date}>
            <Text style={{ fontWeight: 'bold', marginTop: 10 }}>{date}</Text>
            {meds.map((med, index) => (
              <Text key={index}> - {med}</Text>
            ))}
          </View>
        ))
      )}
    </View>
  );
};

const App = () => {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Calendar" component={CalendarScreen} />
        <Tab.Screen name="History" component={HistoryScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
};

export default App;
